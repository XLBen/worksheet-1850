CHIP DecoderSegment201658459 {
    IN A, B, C, D;
    OUT b;
PARTS:
    Not(in=A, out=NotA);
    Not(in=B, out=NotB);
    Not(in=C, out=NotC);
    Not(in=D, out=NotD);
    And(a=NotA, b=NotB, out=Temp1); 
    And(a=Temp1, b=NotC, out=Temp1_2);
    And(a=Temp1_2, b=NotD, out=IsOne);
    And(a=NotA, b=NotB, out=Temp2);
    And(a=Temp2, b=NotC, out=Temp2_2);
    And(a=Temp2_2, b=D, out=IsThree);
    And(a=NotA, b=B, out=Temp3);
    And(a=Temp3, b=NotC, out=Temp3_2);
    And(a=Temp3_2, b=NotD, out=IsFive);
    And(a=NotA, b=B, out=Temp4);
    And(a=Temp4, b=NotC, out=Temp4_2);
    And(a=Temp4_2, b=D, out=IsSix);
    And(a=NotA, b=B, out=Temp5);
    And(a=Temp5, b=C, out=Temp5_2);
    And(a=Temp5_2, b=D, out=IsSeven);
    And(a=A, b=NotB, out=Temp6);
    And(a=Temp6, b=NotC, out=Temp6_2);
    And(a=Temp6_2, b=NotD, out=IsNine);
    And(a=A, b=NotB, out=Temp7);
    And(a=Temp7, b=NotC, out=Temp7_2);
    And(a=Temp7_2, b=D, out=IsA);
    And(a=A, b=NotB, out=Temp8);
    And(a=Temp8, b=C, out=Temp8_2);
    And(a=Temp8_2, b=D, out=IsB);
    And(a=A, b=B, out=Temp9);
    And(a=Temp9, b=NotC, out=Temp9_2);
    And(a=Temp9_2, b=NotD, out=IsD);
    And(a=A, b=B, out=Temp10);
    And(a=Temp10, b=NotC, out=Temp10_2);
    And(a=Temp10_2, b=D, out=IsE);
    And(a=A, b=B, out=Temp11);
    And(a=Temp11, b=C, out=Temp11_2);
    And(a=Temp11_2, b=D, out=IsF);
    Or(a=IsOne, b=IsThree, out=Or1);
    Or(a=Or1, b=IsFive, out=Or2);
    Or(a=Or2, b=IsSix, out=Or3);
    Or(a=Or3, b=IsSeven, out=Or4);
    Or(a=Or4, b=IsNine, out=Or5);
    Or(a=Or5, b=IsA, out=Or6);
    Or(a=Or6, b=IsB, out=Or7);
    Or(a=Or7, b=IsD, out=Or8);
    Or(a=Or8, b=IsE, out=Or9);
    Or(a=Or9, b=IsF, out=b);
}
