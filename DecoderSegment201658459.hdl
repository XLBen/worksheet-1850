CHIP DecoderSegment201658459 {
    IN A, B, C, D;
    OUT b;
PARTS:
    Not(in=A, out=NotA);
    Not(in=B, out=NotB);
    Not(in=C, out=NotC);
    Not(in=D, out=NotD);
    And(a=NotA, b=NotB, out=And0);
    And(a=And0, b=NotC, out=Temp01);
    And(a=Temp01, b=NotD, out=Final0);
    And(a=NotA, b=NotB, out=And2);
    And(a=And2, b=NotC, out=Temp21);
    And(a=Temp21, b=D, out=Final2);
    And(a=NotA, b=NotB, out=And6);
    And(a=And6, b=C, out=Temp61);
    And(a=Temp61, b=NotD, out=Final6);
    And(a=A, b=NotB, out=And8);
    And(a=And8, b=NotC, out=Temp81);
    And(a=Temp81, b=NotD, out=Final8);
    And(a=A, b=NotB, out=AndA);
    And(a=AndA, b=NotC, out=TempA1);
    And(a=TempA1, b=D, out=FinalA);
    And(a=A, b=NotB, out=AndB);
    And(a=AndB, b=C, out=TempB1);
    And(a=TempB1, b=D, out=FinalB);
    And(a=A, b=C, out=AndC);
    And(a=AndC, b=NotC, out=TempC1);
    And(a=TempC1, b=NotD, out=FinalC);
    And(a=A, b=C, out=AndD);
    And(a=AndD, b=NotC, out=TempD1);
    And(a=TempD1, b=D, out=FinalD);
    And(a=A, b=C, out=AndE);
    And(a=AndE, b=D, out=TempE1);
    And(a=TempE1, b=NotD, out=FinalE);
    And(a=A, b=C, out=AndF);
    And(a=AndF, b=D, out=TempF1);
    And(a=TempF1, b=D, out=FinalF);
    Or(a=Final0, b=Final2, out=Or1);
    Or(a=Or1, b=Final6, out=Or2);
    Or(a=Or2, b=Final8, out=Or3);
    Or(a=Or3, b=FinalA, out=Or4);
    Or(a=Or4, b=FinalB, out=Or5);
    Or(a=Or5, b=FinalC, out=Or6);
    Or(a=Or6, b=FinalD, out=Or7);
    Or(a=Or7, b=FinalE, out=Or8);
    Or(a=Or8, b=FinalF, out=b);
}
